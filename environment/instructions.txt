You are participating in *GTOC*, a competition where the best aerospace engineers and mathematicians world wide challenge themselves to solve a “nearly-impossible” problem of interplanetary trajectory design, adapted to test the coding ability of agents like yourself.

You will be given a problem related to interplanetary trajectory design task. You must solve the task by creating an enviroment that simulates the enviroment and design a interplanetary trajectory algorithm that controls the spacecraft to produce a valid submission file.

BENCHMARK INSTRUCTIONS
------
First, please read the instructions below which are specific to our benchmark setup. Note, these instructions can be found again in `/home/instructions.txt`.

- **Competition-specific instructions**: The instructions for the competition are available in `/home/data/description.md`. Read this file to understand the problem setup for the competition you are currently solving.
- **Dataset**: The dataset files for the competition are available in `/home/data/`.
- **Submission**: The solution file must contain all trajectories of Mining Ships. It is a txt file. Each trajectory is expressed by its identification number (ship ID from 1 to N), event ID (from −4 to 60,000), epochs (t, MJD), and the histories of position (km), velocity (km/s), thrust (N), and mass (kg). The vectors of position, velocity, and thrust should be projected onto the J2000 heliocentric ecliptic Cartesian reference frame. 

Table 1  Solution File format
──────────────────────────────────────────────────────────────────────────────
Line num in file │                       Data
─────────────────┼────────────────────────────────────────────────────────────
Line 1           │ 1  0      t   rₓ  rᵧ  r_z   vₓ  vᵧ  v_z   m
Line 2           │ 1  0      t   rₓ  rᵧ  r_z   vₓ  vᵧ  v_z   m
⋮                │ ⋮
Line i           │ 1 −1      t_i  0.0 0.0 0.0
Line i + 1       │ 1 −1      t_i  Tₓ  Tᵧ  T_z
⋮                │ ⋮
Line i + j + 1   │ 1 −1      t_{i+j}  Tₓ  Tᵧ  T_z
Line i + j + 2   │ 1 −1      t_{i+j}  0.0 0.0 0.0
⋮                │ ⋮
Line k           │ 1 −2*     t_k  rₓ  rᵧ  r_z   vₓ  vᵧ  v_z   m
Line k + 1       │ 1 −2      t_k  rₓ  rᵧ  r_z   vₓ  vᵧ  v_z   m
⋮                │ ⋮
Line p           │ 1 60000†  t_p  rₓ  rᵧ  r_z   vₓ  vᵧ  v_z   m
Line p + 1       │ 1 60000   t_p  rₓ  rᵧ  r_z   vₓ  vᵧ  v_z   m
⋮                │ ⋮
Line q           │ 2  0      t   rₓ  rᵧ  r_z   vₓ  vᵧ  v_z   m
Line q + 1       │ 2  0      t   rₓ  rᵧ  r_z   vₓ  vᵧ  v_z   m
⋮                │ ⋮
──────────────────────────────────────────────────────────────────────────────
* event ID −2, −3, or −4 for planetary flybys
† event ID from 1 to 60,000 for asteroid rendezvous

The solution file must be an ASCII text file, and the format is defined in Data section of Table 1.
Each line of the file has the following format: two integers followed by several floating point numbers.
The numbers must be separated by spaces.
The file can be divided into N sections according to the ship ID (the first integer of each line
increased from 1 to N). The first section and the beginning of the second section are shown in Table 1
as an example. Each section lists the events of launch from the Earth, burning arcs, rendezvous, and
flybys, which are indicated by the event ID (the second integer of each line) in order of epochs (the
first floating point number of each line). The second integer at the first line of each section is 0,
indicating that this ship is leaving the Earth at its initial time. The second integer −1 represents burning
arcs, −2 Venus flyby, −3 Earth flyby, −4 Mars flyby, and an asteroid ID represents rendezvous with this
asteroid. Multiple lines with the same epochs are used to represents the events that occur at the same
time. There are two types of formats for floating point numbers, depending on the events:
a. Event ID = −1
At the moment the thruster is switched either from shutdown to burning or vice versa, two
lines must be listed with the same epochs but different thrusts. A burning arc is presented by
starting with a line and ending with a line both with a zero thrust vector, and by evenly
distributing lines with thrust components between the boundary lines. So, the second and
penultimate lines have the same epochs with the first and last lines, respectively, but the thrust
vectors are both nonzero. There is no need to provide data for coast arcs. The time interval
between two successive lines in the burning arc has to be one day, and a partial-day increment
from the antepenultimate line to the last two lines is permitted. Note that, when the solution
is verified, the state and mass of each Mining Ship will be propagated by numerically
integrating the differential equations of the state and the mass, of which the thrust will be
approximated by a third Lagrange interpolating polynomial.
b. Event ID = 0, −2, −3, −4 or asteroid ID
The events of launches, rendezvous, and flybys are all represented by two lines consisting of
the values of epochs, positions, velocities, and masses immediately before and after the events.
The two lines corresponding to launch should be listed with the same epochs, positions, and
masses, but with different velocities, of which the first one is the heliocentric velocity of the
Earth, and the second one is the heliocentric velocity of the Mining Ship. The two lines
corresponding to rendezvous should be listed with the same epochs, positions, and velocities,
but with different masses as the ship unloads a miner or retrieves resources. The two lines
corresponding to planetary flyby should be listed with the same epochs and positions, with
the two heliocentric velocities of the Mining Ship satisfying the GA constraints, and with the
mass difference for Earth flyby being equal to the mass of resources unloaded on the Earth.
The errors in position, velocity, and mass will be evaluated by propagating the state and mass
of the Mining Ship between two successive events (event IDs 0, −2, −3, −4 or asteroid ID).

- **Submission checker**: We provide a tool for checking the validity of your submission file, in the form of a server endpoint at `http://localhost:5000/validate`. If you post a submission file to the server (e.g. `curl -X POST -F "file=@${SUBMISSION_FILE}" ${SERVER_URL}`), you will receive a response message telling you if your submission is valid or not (note that this does NOT give you a score). For your convenience, we provide a script `/home/validate_submission.sh` which can help you make this submission to the validation server.

Your submission will be graded based on the metric in the competition-specific instructions. Your goal is to achieve the best score possible on the competition task. 

Wherever there is a conflict between the points above and the competition-specific instructions in `/home/data/description.md`, the above points should always take priority since these are always true for our offline benchmark setup.
